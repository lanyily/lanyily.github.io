<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="zh" /><updated>2023-10-09T21:48:00+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Gelei Blog</title><subtitle>格蕾的C++技术博客, 涉及C++基础, 计算机图形学, 三维动作捕捉, 游戏引擎开发, 音视频处理等
</subtitle><author><name>Ge Lei</name><email>&lt;mail@domain.tld&gt;</email></author><entry><title type="html">享元模式</title><link href="http://localhost:4000/example/2023-10-08-example/" rel="alternate" type="text/html" title="享元模式" /><published>2023-10-08T00:00:00+08:00</published><updated>2023-10-09T00:38:31+08:00</updated><id>http://localhost:4000/example/example</id><content type="html" xml:base="http://localhost:4000/example/2023-10-08-example/"><![CDATA[<p>本文介绍享元模式</p>

<h2 id="简介">简介</h2>

<p>模式：享元模式</p>

<p>英文：flyweight</p>

<p>定义：使用共享技术有效地支持大量细粒度的对象的复用，从而到达使用大量相似对象的同样的效果。</p>

<p>命名由来：flyweight是特轻量级，蝇量级的意思</p>

<p>意图：在同类对象十分多的情况下，改变模式，当需要某个对象时，尽量共用已经创建出来的同类对象，从而避免频繁new，节约内存，提高效率。</p>

<h2 id="概念">概念</h2>

<p>享元：被共享的单元或者对象</p>

<p>内部状态：存储在享元对象内部的，一直不会发生改变的状态，这种状态可以被共享，一般可以作为享元类的成员变量</p>

<p>外部状态：随着外部环境改变而改变的状态，不可以被共享</p>

<p>总之，将内部状态相同的对象存储在享元池中，传递不同的外部状态。确定内部状态的时候，需要将在多个地方共享的成员变量作为享元对象的内部状态</p>

<h3 id="享元池">享元池</h3>

<p>享元模式中使用了简单工厂，这个工厂一般用于创建享元对象，并保存在一个容器中，这个容器专门用于保存一个或者多个享元对象，称为享元池</p>

<p>享元池的引入造成了程序的复杂性，需要衡量性价比</p>

<p>享元池和对象池，连接池，线程池都可以看成是对象的复用，但是后三者强调储备量，比如线程池可以规定线程池中线程数最多为多少，但是享元池强调的是创建对象这个过程可以使用享元池中的已有一种对象进行代替</p>

<h2 id="代码结构">代码结构</h2>

<p>一般由以下几个部分组成</p>

<ol>
  <li>抽象享元类：Piece</li>
  <li>具体享元类：BlackPiece，可以考虑使用单件模式实现</li>
  <li>享元工厂类：pieceFactory，可以考虑使用单件模式实现</li>
</ol>

<h2 id="代码">代码</h2>

<p>使用享元模式前：</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span><span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span><span class="cpf">&lt;list&gt;</span><span class="cp">
</span>
<span class="k">enum</span> <span class="n">EnumColor</span> <span class="p">{</span>
	<span class="n">Black</span><span class="p">,</span><span class="n">White</span>
<span class="p">};</span>
<span class="k">struct</span> <span class="nc">Position</span> <span class="p">{</span>
	<span class="kt">int</span> <span class="n">m_x</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">m_y</span><span class="p">;</span>
	<span class="n">Position</span><span class="p">(</span><span class="kt">int</span> <span class="n">tmpx</span><span class="p">,</span> <span class="kt">int</span> <span class="n">tmpy</span><span class="p">)</span> <span class="o">:</span><span class="n">m_x</span><span class="p">(</span><span class="n">tmpx</span><span class="p">),</span> <span class="n">m_y</span><span class="p">(</span><span class="n">tmpy</span><span class="p">){}</span>
<span class="p">};</span>
<span class="k">class</span> <span class="nc">Piece</span>
<span class="p">{</span>
<span class="nl">public:</span>
	<span class="n">Piece</span><span class="p">(</span><span class="n">EnumColor</span> <span class="n">tmpcolor</span><span class="p">,</span> <span class="n">Position</span> <span class="n">tmppos</span><span class="p">)</span> <span class="o">:</span><span class="n">m_color</span><span class="p">(</span><span class="n">tmpcolor</span><span class="p">),</span> <span class="n">m_pos</span><span class="p">(</span><span class="n">tmppos</span><span class="p">)</span> <span class="p">{</span>

	<span class="p">}</span>
	<span class="kt">void</span> <span class="nf">draw</span><span class="p">();</span>
<span class="k">private</span><span class="o">:</span>
	<span class="n">EnumColor</span> <span class="n">m_color</span><span class="p">;</span>
	<span class="n">Position</span> <span class="n">m_pos</span><span class="p">;</span>
<span class="p">};</span>
<span class="kt">void</span> <span class="n">Piece</span><span class="o">::</span><span class="n">draw</span><span class="p">()</span>
<span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">m_color</span> <span class="o">==</span> <span class="n">Black</span><span class="p">){</span>
		<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"绘制黑棋于"</span> <span class="o">&lt;&lt;</span> <span class="n">m_pos</span><span class="p">.</span><span class="n">m_x</span> <span class="o">&lt;&lt;</span> <span class="s">","</span> <span class="o">&lt;&lt;</span> <span class="n">m_pos</span><span class="p">.</span><span class="n">m_y</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">else</span> <span class="p">{</span>
		<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"绘制白棋于"</span> <span class="o">&lt;&lt;</span> <span class="n">m_pos</span><span class="p">.</span><span class="n">m_x</span> <span class="o">&lt;&lt;</span> <span class="s">","</span> <span class="o">&lt;&lt;</span> <span class="n">m_pos</span><span class="p">.</span><span class="n">m_y</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>

	<span class="n">Piece</span><span class="o">*</span> <span class="n">p_piece1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Piece</span><span class="p">(</span><span class="n">Black</span><span class="p">,</span> <span class="n">Position</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span>
	<span class="n">p_piece1</span><span class="o">-&gt;</span><span class="n">draw</span><span class="p">();</span>

	<span class="n">Piece</span><span class="o">*</span> <span class="n">p_piece2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Piece</span><span class="p">(</span><span class="n">White</span><span class="p">,</span> <span class="n">Position</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">));</span>
	<span class="n">p_piece2</span><span class="o">-&gt;</span><span class="n">draw</span><span class="p">();</span>

	<span class="n">Piece</span><span class="o">*</span> <span class="n">p_piece3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Piece</span><span class="p">(</span><span class="n">Black</span><span class="p">,</span> <span class="n">Position</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">));</span>
	<span class="n">p_piece3</span><span class="o">-&gt;</span><span class="n">draw</span><span class="p">();</span>

	<span class="n">std</span><span class="o">::</span><span class="n">list</span> <span class="o">&lt;</span><span class="n">Piece</span><span class="o">*&gt;</span><span class="n">piece_list</span><span class="p">;</span>
	<span class="n">piece_list</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">p_piece1</span><span class="p">);</span>
	<span class="n">piece_list</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">p_piece2</span><span class="p">);</span>
	<span class="n">piece_list</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">p_piece3</span><span class="p">);</span>

	<span class="k">delete</span> <span class="n">p_piece1</span><span class="p">;</span>
	<span class="k">delete</span> <span class="n">p_piece2</span><span class="p">;</span>
	<span class="k">delete</span> <span class="n">p_piece3</span><span class="p">;</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>使用享元模式后：</p>

<pre><code class="language-C++">#include&lt;iostream&gt;
#include&lt;list&gt;
#include&lt;map&gt;
enum EnumColor {
	Black, White
};
struct Position {
	int m_x;
	int m_y;
	Position(int tmpx, int tmpy) :m_x(tmpx), m_y(tmpy) {}
};
class Piece
{
public:
	virtual ~Piece() {};
	virtual void draw(Position tmppos)=0;
};
class BlackPiece:public Piece {
public:
	virtual void draw(Position tmppos) {
		std::cout &lt;&lt; "绘制黑棋于" &lt;&lt; tmppos.m_x &lt;&lt; "," &lt;&lt; tmppos.m_y &lt;&lt; std::endl;
	}
};
class WhitePiece :public Piece {
public:
	virtual void draw(Position tmppos) {
		std::cout &lt;&lt; "绘制白棋于" &lt;&lt; tmppos.m_x &lt;&lt; "," &lt;&lt; tmppos.m_y &lt;&lt; std::endl;
	}
};
class pieceFactory {
public:
	~pieceFactory()
	{
		for (auto iter = m_FlyWeightMap.begin(); iter != m_FlyWeightMap.end(); iter++)
		{
			Piece* tmpfw = iter-&gt;second;
			delete tmpfw;
		}
		m_FlyWeightMap.clear();
	}
	Piece* getFlyWeight(EnumColor tmpcolor)
	{
		auto iter = m_FlyWeightMap.find(tmpcolor);
		if(iter==m_FlyWeightMap.end())
		{
			Piece* tmpfw = nullptr;
			if (tmpcolor == Black) tmpfw = new BlackPiece();
			else tmpfw = new WhitePiece();
			m_FlyWeightMap.insert(std::make_pair(tmpcolor, tmpfw));
			return tmpfw;
		}
		else 
			return iter-&gt;second;
	}
private:
	std::map&lt;EnumColor, Piece*&gt;m_FlyWeightMap;
};
int main()
{
	pieceFactory* pfactory = new pieceFactory();
	Piece* p_piece1 = pfactory-&gt;getFlyWeight(Black);
	p_piece1-&gt;draw(Position(3, 3));

	Piece* p_piece2 = pfactory-&gt;getFlyWeight(Black);
	p_piece2-&gt;draw(Position(5, 5));

	Piece* p_piece3 = pfactory-&gt;getFlyWeight(Black);
	p_piece3-&gt;draw(Position(4, 6));

	Piece* p_piece4 = pfactory-&gt;getFlyWeight(Black);
	p_piece4-&gt;draw(Position(5, 7));

	delete pfactory;
	return 0;
}
</code></pre>

<p>关闭命令行输出时两种代码创建相同数量的类的运行速度：</p>

<table>
  <thead>
    <tr>
      <th>对象数/ms</th>
      <th>普通模式</th>
      <th>享元模式</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1000（波动大）</td>
      <td>400</td>
      <td>170-356</td>
    </tr>
    <tr>
      <td>一万</td>
      <td>2572</td>
      <td>1800-2200</td>
    </tr>
    <tr>
      <td>十万</td>
      <td>19643-33911</td>
      <td>15749-16401</td>
    </tr>
    <tr>
      <td>百万</td>
      <td>249130-216128</td>
      <td>159932</td>
    </tr>
    <tr>
      <td>千万</td>
      <td>2417764-2123181</td>
      <td>1616665-1656742</td>
    </tr>
    <tr>
      <td>一亿</td>
      <td>19677707-20324193</td>
      <td>15560363</td>
    </tr>
  </tbody>
</table>

<p>可以看出来性能提升还不小，优化了25%左右</p>

<h2 id="使用场景">使用场景</h2>

<ol>
  <li>程序中有大量相同或者相似的对象造成内存的大量消耗</li>
  <li>对象的大部分状态可以定义为外部状态作为参数传入</li>
</ol>

<h2 id="相关模式">相关模式</h2>

<ol>
  <li>简单工厂模式</li>
  <li>单件模式</li>
</ol>]]></content><author><name>Ge Lei</name><email>&lt;mail@domain.tld&gt;</email></author><category term="example" /><summary type="html"><![CDATA[享元模式]]></summary></entry><entry><title type="html">享元模式</title><link href="http://localhost:4000/design%20pattern/2023-10-08-design-pattern;example/" rel="alternate" type="text/html" title="享元模式" /><published>2023-10-08T00:00:00+08:00</published><updated>2023-10-09T21:48:00+08:00</updated><id>http://localhost:4000/design%20pattern/design%20pattern;example</id><content type="html" xml:base="http://localhost:4000/design%20pattern/2023-10-08-design-pattern;example/"><![CDATA[<p>本文介绍享元模式</p>

<h2 id="简介">简介</h2>

<p>模式：享元模式</p>

<p>英文：flyweight</p>

<p>定义：使用共享技术有效地支持大量细粒度的对象的复用，从而到达使用大量相似对象的同样的效果。</p>

<p>命名由来：flyweight是特轻量级，蝇量级的意思</p>

<p>意图：在同类对象十分多的情况下，改变模式，当需要某个对象时，尽量共用已经创建出来的同类对象，从而避免频繁new，节约内存，提高效率。</p>

<h2 id="概念">概念</h2>

<p>享元：被共享的单元或者对象</p>

<p>内部状态：存储在享元对象内部的，一直不会发生改变的状态，这种状态可以被共享，一般可以作为享元类的成员变量</p>

<p>外部状态：随着外部环境改变而改变的状态，不可以被共享</p>

<p>总之，将内部状态相同的对象存储在享元池中，传递不同的外部状态。确定内部状态的时候，需要将在多个地方共享的成员变量作为享元对象的内部状态</p>

<h3 id="享元池">享元池</h3>

<p>享元模式中使用了简单工厂，这个工厂一般用于创建享元对象，并保存在一个容器中，这个容器专门用于保存一个或者多个享元对象，称为享元池</p>

<p>享元池的引入造成了程序的复杂性，需要衡量性价比</p>

<p>享元池和对象池，连接池，线程池都可以看成是对象的复用，但是后三者强调储备量，比如线程池可以规定线程池中线程数最多为多少，但是享元池强调的是创建对象这个过程可以使用享元池中的已有一种对象进行代替</p>

<h2 id="代码结构">代码结构</h2>

<p>一般由以下几个部分组成</p>

<ol>
  <li>抽象享元类：Piece</li>
  <li>具体享元类：BlackPiece，可以考虑使用单件模式实现</li>
  <li>享元工厂类：pieceFactory，可以考虑使用单件模式实现</li>
</ol>

<h2 id="代码">代码</h2>

<p>使用享元模式前：</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span><span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span><span class="cpf">&lt;list&gt;</span><span class="cp">
</span>
<span class="k">enum</span> <span class="n">EnumColor</span> <span class="p">{</span>
	<span class="n">Black</span><span class="p">,</span><span class="n">White</span>
<span class="p">};</span>
<span class="k">struct</span> <span class="nc">Position</span> <span class="p">{</span>
	<span class="kt">int</span> <span class="n">m_x</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">m_y</span><span class="p">;</span>
	<span class="n">Position</span><span class="p">(</span><span class="kt">int</span> <span class="n">tmpx</span><span class="p">,</span> <span class="kt">int</span> <span class="n">tmpy</span><span class="p">)</span> <span class="o">:</span><span class="n">m_x</span><span class="p">(</span><span class="n">tmpx</span><span class="p">),</span> <span class="n">m_y</span><span class="p">(</span><span class="n">tmpy</span><span class="p">){}</span>
<span class="p">};</span>
<span class="k">class</span> <span class="nc">Piece</span>
<span class="p">{</span>
<span class="nl">public:</span>
	<span class="n">Piece</span><span class="p">(</span><span class="n">EnumColor</span> <span class="n">tmpcolor</span><span class="p">,</span> <span class="n">Position</span> <span class="n">tmppos</span><span class="p">)</span> <span class="o">:</span><span class="n">m_color</span><span class="p">(</span><span class="n">tmpcolor</span><span class="p">),</span> <span class="n">m_pos</span><span class="p">(</span><span class="n">tmppos</span><span class="p">)</span> <span class="p">{</span>

	<span class="p">}</span>
	<span class="kt">void</span> <span class="nf">draw</span><span class="p">();</span>
<span class="k">private</span><span class="o">:</span>
	<span class="n">EnumColor</span> <span class="n">m_color</span><span class="p">;</span>
	<span class="n">Position</span> <span class="n">m_pos</span><span class="p">;</span>
<span class="p">};</span>
<span class="kt">void</span> <span class="n">Piece</span><span class="o">::</span><span class="n">draw</span><span class="p">()</span>
<span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">m_color</span> <span class="o">==</span> <span class="n">Black</span><span class="p">){</span>
		<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"绘制黑棋于"</span> <span class="o">&lt;&lt;</span> <span class="n">m_pos</span><span class="p">.</span><span class="n">m_x</span> <span class="o">&lt;&lt;</span> <span class="s">","</span> <span class="o">&lt;&lt;</span> <span class="n">m_pos</span><span class="p">.</span><span class="n">m_y</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">else</span> <span class="p">{</span>
		<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"绘制白棋于"</span> <span class="o">&lt;&lt;</span> <span class="n">m_pos</span><span class="p">.</span><span class="n">m_x</span> <span class="o">&lt;&lt;</span> <span class="s">","</span> <span class="o">&lt;&lt;</span> <span class="n">m_pos</span><span class="p">.</span><span class="n">m_y</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>

	<span class="n">Piece</span><span class="o">*</span> <span class="n">p_piece1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Piece</span><span class="p">(</span><span class="n">Black</span><span class="p">,</span> <span class="n">Position</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">));</span>
	<span class="n">p_piece1</span><span class="o">-&gt;</span><span class="n">draw</span><span class="p">();</span>

	<span class="n">Piece</span><span class="o">*</span> <span class="n">p_piece2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Piece</span><span class="p">(</span><span class="n">White</span><span class="p">,</span> <span class="n">Position</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">));</span>
	<span class="n">p_piece2</span><span class="o">-&gt;</span><span class="n">draw</span><span class="p">();</span>

	<span class="n">Piece</span><span class="o">*</span> <span class="n">p_piece3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Piece</span><span class="p">(</span><span class="n">Black</span><span class="p">,</span> <span class="n">Position</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">));</span>
	<span class="n">p_piece3</span><span class="o">-&gt;</span><span class="n">draw</span><span class="p">();</span>

	<span class="n">std</span><span class="o">::</span><span class="n">list</span> <span class="o">&lt;</span><span class="n">Piece</span><span class="o">*&gt;</span><span class="n">piece_list</span><span class="p">;</span>
	<span class="n">piece_list</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">p_piece1</span><span class="p">);</span>
	<span class="n">piece_list</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">p_piece2</span><span class="p">);</span>
	<span class="n">piece_list</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">p_piece3</span><span class="p">);</span>

	<span class="k">delete</span> <span class="n">p_piece1</span><span class="p">;</span>
	<span class="k">delete</span> <span class="n">p_piece2</span><span class="p">;</span>
	<span class="k">delete</span> <span class="n">p_piece3</span><span class="p">;</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>使用享元模式后：</p>

<pre><code class="language-C++">#include&lt;iostream&gt;
#include&lt;list&gt;
#include&lt;map&gt;
enum EnumColor {
	Black, White
};
struct Position {
	int m_x;
	int m_y;
	Position(int tmpx, int tmpy) :m_x(tmpx), m_y(tmpy) {}
};
class Piece
{
public:
	virtual ~Piece() {};
	virtual void draw(Position tmppos)=0;
};
class BlackPiece:public Piece {
public:
	virtual void draw(Position tmppos) {
		std::cout &lt;&lt; "绘制黑棋于" &lt;&lt; tmppos.m_x &lt;&lt; "," &lt;&lt; tmppos.m_y &lt;&lt; std::endl;
	}
};
class WhitePiece :public Piece {
public:
	virtual void draw(Position tmppos) {
		std::cout &lt;&lt; "绘制白棋于" &lt;&lt; tmppos.m_x &lt;&lt; "," &lt;&lt; tmppos.m_y &lt;&lt; std::endl;
	}
};
class pieceFactory {
public:
	~pieceFactory()
	{
		for (auto iter = m_FlyWeightMap.begin(); iter != m_FlyWeightMap.end(); iter++)
		{
			Piece* tmpfw = iter-&gt;second;
			delete tmpfw;
		}
		m_FlyWeightMap.clear();
	}
	Piece* getFlyWeight(EnumColor tmpcolor)
	{
		auto iter = m_FlyWeightMap.find(tmpcolor);
		if(iter==m_FlyWeightMap.end())
		{
			Piece* tmpfw = nullptr;
			if (tmpcolor == Black) tmpfw = new BlackPiece();
			else tmpfw = new WhitePiece();
			m_FlyWeightMap.insert(std::make_pair(tmpcolor, tmpfw));
			return tmpfw;
		}
		else 
			return iter-&gt;second;
	}
private:
	std::map&lt;EnumColor, Piece*&gt;m_FlyWeightMap;
};
int main()
{
	pieceFactory* pfactory = new pieceFactory();
	Piece* p_piece1 = pfactory-&gt;getFlyWeight(Black);
	p_piece1-&gt;draw(Position(3, 3));

	Piece* p_piece2 = pfactory-&gt;getFlyWeight(Black);
	p_piece2-&gt;draw(Position(5, 5));

	Piece* p_piece3 = pfactory-&gt;getFlyWeight(Black);
	p_piece3-&gt;draw(Position(4, 6));

	Piece* p_piece4 = pfactory-&gt;getFlyWeight(Black);
	p_piece4-&gt;draw(Position(5, 7));

	delete pfactory;
	return 0;
}
</code></pre>

<p>关闭命令行输出时两种代码创建相同数量的类的运行速度：</p>

<table>
  <thead>
    <tr>
      <th>对象数/ms</th>
      <th>普通模式</th>
      <th>享元模式</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1000（波动大）</td>
      <td>400</td>
      <td>170-356</td>
    </tr>
    <tr>
      <td>一万</td>
      <td>2572</td>
      <td>1800-2200</td>
    </tr>
    <tr>
      <td>十万</td>
      <td>19643-33911</td>
      <td>15749-16401</td>
    </tr>
    <tr>
      <td>百万</td>
      <td>249130-216128</td>
      <td>159932</td>
    </tr>
    <tr>
      <td>千万</td>
      <td>2417764-2123181</td>
      <td>1616665-1656742</td>
    </tr>
    <tr>
      <td>一亿</td>
      <td>19677707-20324193</td>
      <td>15560363</td>
    </tr>
  </tbody>
</table>

<p>可以看出来性能提升还不小，优化了25%左右</p>

<h2 id="使用场景">使用场景</h2>

<ol>
  <li>程序中有大量相同或者相似的对象造成内存的大量消耗</li>
  <li>对象的大部分状态可以定义为外部状态作为参数传入</li>
</ol>

<h2 id="相关模式">相关模式</h2>

<ol>
  <li>简单工厂模式</li>
  <li>单件模式</li>
</ol>]]></content><author><name>Ge Lei</name><email>&lt;mail@domain.tld&gt;</email></author><category term="design pattern" /><summary type="html"><![CDATA[享元模式]]></summary></entry><entry><title type="html">介绍tensorrt 8.6.1</title><link href="http://localhost:4000/example/2023-09-03-tensorrt-tensorrt%E7%AE%80%E4%BB%8B/" rel="alternate" type="text/html" title="介绍tensorrt 8.6.1" /><published>2023-09-03T00:00:00+08:00</published><updated>2023-10-09T00:36:33+08:00</updated><id>http://localhost:4000/example/tensorrt-tensorrt%E7%AE%80%E4%BB%8B</id><content type="html" xml:base="http://localhost:4000/example/2023-09-03-tensorrt-tensorrt%E7%AE%80%E4%BB%8B/"><![CDATA[<p>以下介绍tensorrt 8.6.1版本的内容</p>

<h1 id="目录">目录</h1>

<ol>
  <li>TensorRT简介
    <ol>
      <li>基本特性和用法</li>
      <li>工作流：使用tensorrt api搭建</li>
      <li>工作流：使用onnx-parser——使用parser解析onnx模型</li>
      <li>工作流：使用框架内tensorrt接口</li>
    </ol>
  </li>
  <li>开发辅助工具
    <ol>
      <li>trtexec</li>
      <li>Netron</li>
      <li>polygraphy</li>
      <li>onnx-graphsurgeon</li>
      <li>Nsight Systems</li>
      <li>性能测试，网络可视化，模型迁移，精度检验，计算图编辑，性能优化</li>
    </ol>
  </li>
  <li>插件书写
    <ol>
      <li>使用plugin的简单例子</li>
      <li>关键API</li>
      <li>结合使用parser和plugin</li>
      <li>plugin高级话题</li>
      <li>使用plugin的例子</li>
    </ol>
  </li>
  <li>tensorrt高级用法
    <ol>
      <li>多optimization profile</li>
      <li>多stream</li>
      <li>多context</li>
      <li>cuda graph</li>
      <li>timing cache</li>
      <li>algorithm selector</li>
      <li>refit</li>
      <li>tactic source</li>
      <li>硬件兼容和版本兼容</li>
    </ol>
  </li>
  <li>常见优化策略
    <ol>
      <li>概述</li>
      <li>性能分析工具</li>
      <li>性能优化实例</li>
    </ol>
  </li>
</ol>

<h2 id="tensorrt工作流">tensorrt工作流</h2>

<ol>
  <li>使用框架自带的TRT接口</li>
</ol>

<p>TF-TRT，Torch-TensorRT</p>

<p>特点：易用但是性能不佳，兼容性有限，需要返回原框架计算</p>

<ol>
  <li>使用Parser——最常用，也是我们目前采用的</li>
</ol>

<p>TF/Torch/…-&gt;ONNX-&gt;TensorRT</p>

<p>特点：性能兼容性更好，不支持时可以改网络，改parser或者写plugin</p>

<p>当遇到重新需要生成的，需要parser onnx后，进行serialize生成trt</p>

<ol>
  <li>使用原生API搭建网络</li>
</ol>

<p><img src="https://raw.githubusercontent.com/lanyily/Cplusplus-pic/main/2023/image-20230829103956511.png" alt="image-20230829103956511" /></p>

<p><strong>以下只介绍使用Parser的tensorrt工作流</strong></p>

<h1 id="实际工程通用流程">实际工程通用流程</h1>

<h2 id="workflow">workflow</h2>

<p><strong>pytorch/tensorflow-&gt;C-&gt;onnx-&gt;A-&gt;trt-&gt;B-&gt;使用</strong></p>

<p>C为python转C++的最重要过程</p>

<p>构建引擎需要时间，为了构建一次来反复使用，需要A，B两个工作流</p>

<h3 id="解析onnx">解析onnx</h3>

<p>A：<strong>parse/deserialize onnx，serialize trt</strong></p>

<p>解析对象为onnx文件：没有已经转好的trt或者已有的trt不适配，需要将onnx序列化trt</p>

<h3 id="解析trt">解析trt</h3>

<p>B：<strong>parse/deserialize trt</strong></p>

<p>解析对象为trt文件：已有trt，直接导入然后得到engine和context，使用</p>

<hr />

<p>A，B两者最重要的<strong>中间产物</strong>都是parseTRT或者onnx得到的<strong>engine和context</strong></p>

<h3 id="python转c">python转C++</h3>

<p>C：将python模型转化为C++</p>

<p>pytorch</p>

<ol>
  <li>创建网络，保存为.pt</li>
  <li>pytorch内部API将.pt转化为.onnx</li>
  <li>tensorrt中读取onnx构建engine</li>
</ol>

<p>TensorFlow</p>

<ol>
  <li>创建网络保存为.pb文件</li>
  <li>使用tf2onnx将.pb转化为onnx文件</li>
  <li>tensorrt中读取onnx构建engine</li>
</ol>

<h2 id="使用trt的限制">使用trt的限制</h2>

<p>直接使用B的限制条件，以下环境需要一致</p>

<ol>
  <li>硬件环境必须一样，因为engine会根据硬件做优化，不能跨硬件平台</li>
  <li>CUDA</li>
  <li>cuDNN</li>
  <li>tensorRT环境，不同版本tensorrt生成的engine不能够相互兼容</li>
  <li><strong>同平台同环境</strong>多次生成的engine<strong>可能不同</strong></li>
</ol>

<p>第4点：tensorrt runtime版本和engine版本不同时的报错信息：</p>

<p><img src="https://raw.githubusercontent.com/lanyily/Cplusplus-pic/main/2023/image-20230824150423797.png" alt="image-20230824150423797" /></p>

<p>对于第5点，可以采用以下手段，见教程第四部分</p>

<p><img src="https://raw.githubusercontent.com/lanyily/Cplusplus-pic/main/2023/image-20230824150613993.png" alt="image-20230824150613993" /></p>

<h2 id="onnx介绍">ONNX介绍</h2>

<table>
  <tbody>
    <tr>
      <td>官网：[ONNX</td>
      <td>Home](https://onnx.ai/)</td>
    </tr>
  </tbody>
</table>

<p>open neural network exchange</p>

<p>onnx是</p>

<ol>
  <li>当前tensorrt导入模型的主要途径</li>
  <li>TF/pytorch模型转tensorrt的中间表示</li>
  <li>用于存储训练好的模型</li>
</ol>

<p>onnxruntime</p>

<ol>
  <li>利用onnx格式模型进行推理计算的框架</li>
  <li>可以用于检查tensorflow和torch模型导出到onnx的正确性</li>
</ol>

<h1 id="a-解析onnx">A. 解析onnx</h1>

<p>已有的trt不适配，需要将onnx转为trt</p>

<ol>
  <li>parse onnx</li>
  <li>serialize trt</li>
  <li>保存trt文件</li>
</ol>

<p>注意：如果不使用Int8模式，onnx的parser代码几乎通用</p>

<h2 id="概览">概览</h2>

<p><img src="https://raw.githubusercontent.com/lanyily/Cplusplus-pic/main/2023/image-20230824150915553.png" alt="image-20230824150915553" /></p>

<p>构建阶段</p>

<ol>
  <li>建立logger（日志）</li>
  <li>建立builder（网络元数据)</li>
  <li>创建network（计算图）（API独需）</li>
  <li>生成序列化的网络（网络的trt内部表示）</li>
</ol>

<p>运行阶段</p>

<ol>
  <li>建立engine（可执行代码）</li>
  <li>创建context（gpu进程）</li>
  <li>buffer准备（host+device）</li>
  <li>拷贝host to device</li>
  <li>执行推理execute</li>
  <li>拷贝device to host</li>
  <li>善后</li>
</ol>

<h2 id="a1-构建阶段">A.1 构建阶段</h2>

<h3 id="1-创建logger">1. 创建logger</h3>

<p>记录器</p>

<p><code class="language-plaintext highlighter-rouge">getTRTLogger();</code></p>

<h3 id="2-创建builder">2. 创建builder</h3>

<p>模型搭建的入口，网络的trt内部表示和引擎都是builder的成员方法生成的</p>

<p>builder.create_optimization_profile()：创建用于dynamic shape输入的配置器</p>

<p><code class="language-plaintext highlighter-rouge">createInferBuilder()</code></p>

<p>builder.create_network()：创建tensorrt网络对象</p>

<p><code class="language-plaintext highlighter-rouge">createNetworkV2()</code></p>

<p>在builderconfig下面进行细节设置</p>

<hr />

<p>另外builder需要创建optimazation profile</p>

<p>在给定输入张量的最小最常见最大尺寸后，将设置的profile传给config</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">auto</span> <span class="n">profile</span> <span class="o">=</span> <span class="n">builder</span><span class="o">-&gt;</span><span class="n">createOptimizationProfile</span><span class="p">();</span>
<span class="n">profile</span><span class="o">-&gt;</span><span class="n">setDimensions</span><span class="p">();</span>
<span class="n">config</span><span class="o">-&gt;</span><span class="n">addOptimizationProfile</span><span class="p">(</span><span class="n">profile</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="3-设置builder-config">3. 设置builder config</h3>

<p>进行设置网络属性</p>

<p>config=builder.create_builder_config()</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">auto</span> <span class="n">config</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">nvinfer1</span><span class="o">::</span><span class="n">IBuilderConfig</span><span class="p">,</span> <span class="n">samplesCommon</span><span class="o">::</span><span class="n">InferDeleter</span><span class="o">&gt;</span><span class="p">(</span><span class="n">builder</span><span class="o">-&gt;</span><span class="n">createBuilderConfig</span><span class="p">());</span>
</code></pre></div></div>

<ol>
  <li>指定构建期可用显存</li>
  <li>设置标志位开关</li>
  <li>指定校正器</li>
  <li>添加用于dynamic shape输入的配置器</li>
</ol>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">config</span><span class="o">-&gt;</span><span class="n">addOptimizationProfile</span><span class="p">(</span><span class="n">profile</span><span class="p">);</span><span class="c1">//添加用于dynamic shape输入的配置器</span>
<span class="n">config</span><span class="o">-&gt;</span><span class="n">setFlag</span><span class="p">();</span>
</code></pre></div></div>

<h3 id="4-搭建network">4. 搭建network</h3>

<p>创建network（计算图）是API独需的因为其他两种方法使用parser从onnx导入，不用一层层添加</p>

<p>network=builder.create_network()</p>

<p>在onnx-parser中一旦模型parser解析完成，network就自动填好了，成为了serialized network</p>

<p><strong>onnx-parser解析</strong></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">createParser</span><span class="p">(</span><span class="o">*</span><span class="n">network</span><span class="p">,</span> <span class="n">sample</span><span class="o">::</span><span class="n">gLogger</span><span class="p">.</span><span class="n">getTRTLogger</span><span class="p">();</span>

<span class="n">parser</span><span class="o">-&gt;</span><span class="n">parseFromFile</span><span class="p">(</span><span class="n">modelFile</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">sample</span><span class="o">::</span><span class="n">gLogger</span><span class="p">.</span><span class="n">getReportableSeverity</span><span class="p">()));</span>
</code></pre></div></div>

<h2 id="a2-运行阶段-runtime">A.2 运行阶段 runtime</h2>

<h3 id="5-生成trt内部表示-serialized-network">5. 生成TRT内部表示-serialized network</h3>

<p>build_serialized_network(network,config)</p>

<h3 id="6-生成engine">6. 生成engine</h3>

<p>推理引擎，可执行的代码段</p>

<p>生成engine：</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">m_engine</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">nvinfer1</span><span class="o">::</span><span class="n">ICudaEngine</span><span class="p">,</span> <span class="n">samplesCommon</span><span class="o">::</span><span class="n">InferDeleter</span><span class="o">&gt;</span><span class="p">(</span><span class="n">builder</span><span class="o">-&gt;</span><span class="n">buildEngineWithConfig</span><span class="p">(</span><span class="o">*</span><span class="n">network</span><span class="p">,</span> <span class="o">*</span><span class="n">config</span><span class="p">),</span> <span class="n">samplesCommon</span><span class="o">::</span><span class="n">InferDeleter</span><span class="p">());</span>
</code></pre></div></div>

<h3 id="7-创建context">7. 创建context</h3>

<p>context即GPU进程</p>

<p>创建context：</p>

<p>python:<code class="language-plaintext highlighter-rouge">engine.create_execution_context()</code></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">m_context</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">nvinfer1</span><span class="o">::</span><span class="n">IExecutionContext</span><span class="p">,</span> <span class="n">samplesCommon</span><span class="o">::</span><span class="n">InferDeleter</span><span class="o">&gt;</span><span class="p">(</span><span class="n">m_engine</span><span class="o">-&gt;</span><span class="n">createExecutionContext</span><span class="p">(),</span> <span class="n">samplesCommon</span><span class="o">::</span><span class="n">InferDeleter</span><span class="p">());</span>
</code></pre></div></div>

<h3 id="绑定输入输出">绑定输入输出</h3>

<p>仅dynamic shape需要</p>

<h3 id="8-准备buffer">8. 准备buffer</h3>

<ol>
  <li>内存和显存的分别申请</li>
  <li>拷贝</li>
  <li>释放</li>
</ol>

<p>python:<code class="language-plaintext highlighter-rouge">cudart.cudaMalloc(inputHost.nbytes)[1]</code></p>

<p><strong>课程第四部分会对buffer部分的优化做介绍</strong></p>

<p><img src="https://raw.githubusercontent.com/lanyily/Cplusplus-pic/main/2023/image-20230824114005386.png" alt="image-20230824114005386" /></p>

<p><img src="https://raw.githubusercontent.com/lanyily/Cplusplus-pic/main/2023/image-20230824145433795.png" alt="image-20230824145433795" /></p>

<h3 id="9-执行计算-execute">9. 执行计算-execute</h3>

<p>拷贝到cuda buffer上执行再拷贝回host，这一步一般是<strong>B.解析trt</strong>中做，但是读取onnx后也可以做</p>

<p><code class="language-plaintext highlighter-rouge">m_context-&gt;enqueueV2()</code></p>

<p><img src="https://raw.githubusercontent.com/lanyily/Cplusplus-pic/main/2023/image-20230824114125832.png" alt="image-20230824114125832" /></p>

<h3 id="10-序列化引擎">10. 序列化引擎</h3>

<p><code class="language-plaintext highlighter-rouge">engine-&gt;serialize()</code></p>

<h3 id="11-导出trt">11. 导出trt</h3>

<h2 id="特殊情况">特殊情况</h2>

<p>遇到tensorrt不支持的onnx模型节点</p>

<ol>
  <li>修改源模型</li>
  <li>修改onnx计算图，onnx-surgeon</li>
  <li>tensorrt中实现plugin</li>
  <li>修改parser：修改源码，重新编译trt，因为tensorrt部分开源</li>
</ol>

<h1 id="b-解析trt">B. 解析trt</h1>

<p>已有trt，直接导入然后使用</p>

<p>parse TRT后得到engine和context</p>

<h3 id="1-创建logger-1">1. 创建logger</h3>

<p><code class="language-plaintext highlighter-rouge">getTRTLogger()</code></p>

<h3 id="2-创建cudaruntime">2. 创建cudaruntime</h3>

<p><code class="language-plaintext highlighter-rouge">createInferRuntime()</code></p>

<h3 id="3-解析反序列化trt文件生成引擎">3. 解析/反序列化trt文件，生成引擎</h3>

<p><code class="language-plaintext highlighter-rouge">runtime-&gt;deserializeCudaEngine()</code></p>

<h3 id="4-创建context">4. 创建context</h3>

<p><code class="language-plaintext highlighter-rouge">engine-&gt;createExecutionContext()</code></p>

<h3 id="5-使用">5. 使用</h3>

<h1 id="背景知识">背景知识</h1>

<h3 id="cuda异构计算">CUDA异构计算</h3>

<p><img src="https://raw.githubusercontent.com/lanyily/Cplusplus-pic/main/2023/image-20230824145343446.png" alt="image-20230824145343446" /></p>

<h3 id="explicit-batch-implicit-batch">Explicit Batch Implicit Batch</h3>

<p>Explicit Batch为TensorRT主流网络构建方法，可以用dynamic shape</p>

<p>从onnx中导入的模型默认使用explicit batch模式</p>

<p>implicit batch单纯用于向旧版兼容</p>

<hr />

<h3 id="dynamic-shape模式">Dynamic Shape模式</h3>

<p>适用于输入张量形状在推理时才决定网络</p>

<p>除了batch维度，其他维度可以在推理时决定</p>

<p><strong>前提</strong></p>

<ol>
  <li>需要explicit batch</li>
  <li>需要optimazation profile帮助网络优化</li>
  <li>需要context.set_input_shape绑定实际输入数据形状</li>
</ol>

<h3 id="一些建议">一些建议</h3>

<ol>
  <li>使用最新的tensorrt8</li>
  <li>使用explicit batch模式，是onnx格式默认格式</li>
  <li>使用dynamic shape模式</li>
</ol>]]></content><author><name>Ge Lei</name><email>&lt;mail@domain.tld&gt;</email></author><category term="example" /><summary type="html"><![CDATA[tensorrt是常用算法部署工具]]></summary></entry><entry><title type="html">Introducing Hydejack 9</title><link href="http://localhost:4000/example/2020-07-03-introducing-hydejack-9/" rel="alternate" type="text/html" title="Introducing Hydejack 9" /><published>2020-07-03T00:00:00+08:00</published><updated>2023-10-06T01:27:20+08:00</updated><id>http://localhost:4000/example/introducing-hydejack-9</id><content type="html" xml:base="http://localhost:4000/example/2020-07-03-introducing-hydejack-9/"><![CDATA[<p class="lead">Version 9 is the most complete version of Hydejack yet.</p>

<p><a href="#linking-in-style">Modernized</a> <a href="#whats-in-the-cards">design</a>, <a href="#ready-for-the-big-screen">big headlines</a>, big new features: <a href="#built-in-search">Built-In Search</a>, <a href="#sticky-table-of-contents">Sticky Table of Contents</a>, and <a href="#auto-hiding-navbar">Auto-Hiding Navbar</a>. That <a href="#and-much-more">and more</a> is Hydejack 9.</p>

<ul class="large-only" id="markdown-toc">
  <li><a href="#linking-in-style" id="markdown-toc-linking-in-style">Linking in Style</a></li>
  <li><a href="#ready-for-the-big-screen" id="markdown-toc-ready-for-the-big-screen">Ready for the Big Screen</a></li>
  <li><a href="#whats-in-the-cards" id="markdown-toc-whats-in-the-cards">What’s in the Cards?</a></li>
  <li><a href="#built-in-search" id="markdown-toc-built-in-search">Built-In Search</a></li>
  <li><a href="#auto-hiding-navbar" id="markdown-toc-auto-hiding-navbar">Auto-Hiding Navbar</a></li>
  <li><a href="#sticky-table-of-contents" id="markdown-toc-sticky-table-of-contents">Sticky Table of Contents</a></li>
  <li><a href="#and-much-more" id="markdown-toc-and-much-more">…and much more</a></li>
  <li><a href="#even-more-to-come" id="markdown-toc-even-more-to-come">Even More to Come</a></li>
  <li><a href="#get-it-now" id="markdown-toc-get-it-now">Get It Now</a></li>
</ul>

<h2 id="linking-in-style">Linking in Style</h2>

<p>Ever since the introduction of Dark Mode, link styles have been a bit of an issue. Specifically, finding an accent color that worked on both light and dark backgrounds was the problem. With Hydejack 9, the <a href="#linking-in-style">link style</a> has been revamped so that legibility is no longer tied to the choice of accent_color, giving you much more freedom in creating a unique design flavor for your site.</p>

<h2 id="ready-for-the-big-screen">Ready for the Big Screen</h2>

<p>The theme on which Hydejack is based was designed for a different era of the web. Hydejack has inherited many of its limitations, but over time I’ve made adjustments, such as centering the content column for better reading ergonomics.</p>

<p>With version 9, Hydejack takes full advantage of large displays. Whether it’s design indulgences such as oversized headlines, or quality of life improvements such as a floating table of contents, Hydejack now finds use for all that extra screen real estate<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>.</p>

<h2 id="whats-in-the-cards">What’s in the Cards?</h2>

<p>Hydejack 9 now lets you use content cards for both projects and posts. 
The cards have been redesigned with a new hover style and drop shadows and they retain their unique transition-to-next-page animations, which now also work on the <code class="language-plaintext highlighter-rouge">blog</code> layout. The new <code class="language-plaintext highlighter-rouge">grid</code> layout lets you do that.</p>

<p>Good images are key to making the most out of content cards. For that reason, a <a href="/docs/basics/#adding-images">chapter on images</a> has been added to the documentation.</p>

<h2 id="built-in-search">Built-In Search</h2>

<p>Hydejack now has Built-In Search. It even works offline. I’ve been prototyping many approaches and eventually settled on a fully client-side, off-the-main thread solution that perfectly fits the use case of personal sites and shows surprisingly good results<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>.</p>

<p>The new search UI is custom made for Hydejack and shows beautiful previews of your posts and pages, right on top of your regular content.</p>

<p>Together with the Auto-Hiding Navbar, your entire content library is now only a couple of keystrokes away.</p>

<h2 id="auto-hiding-navbar">Auto-Hiding Navbar</h2>

<p>A navbar that’s there when you need it, and disappears when you don’t. Simple as that.</p>

<h2 id="sticky-table-of-contents">Sticky Table of Contents</h2>

<p>Already a staple on so many sites on the web, this pattern is now also available in Hydejack. 
What’s unique about it is that it simply picks up the table of contents already created by kramdown’s <code class="language-plaintext highlighter-rouge">{:toc}</code> tag and transparently upgrades it to a fully dynamic version.</p>

<h2 id="and-much-more">…and much more</h2>

<p>Other noteworthy changes include:</p>
<ul>
  <li>Support for Jekyll 4</li>
  <li>Choice between MathJax and KaTeX for math rendering</li>
  <li>Use of <code class="language-plaintext highlighter-rouge">jekyll-include-cache</code> for drastically improved page building speeds</li>
  <li>New variables configuration file — adjust content width, sidebar width, font size, etc…</li>
  <li>…and the option to disable grouping projects by year.</li>
</ul>

<p>Read the the <a href="/CHANGELOG/" class="heading flip-title">CHANGELOG</a> for the full scope of features and improvements made in Hydejack 9.
Maybe just glance at it to confirm that it is indeed a pretty long list.</p>

<h2 id="even-more-to-come">Even More to Come</h2>

<p>New features for 9.1 are already lined up. Code block headers and code line highlights for even better technical blogging, as well as download buttons on the resume page for PDF, vCard, and Resume JSON are just around the corner.</p>

<h2 id="get-it-now">Get It Now</h2>
<p>The Free Version of Hydejack is now availabe on <a href="https://rubygems.org/gems/jekyll-theme-hydejack">RubyGems</a>
and for the first time also on <a href="https://github.com/hydecorp/hydejack/packages">GitHub Packages</a>. 
The source code is available on <a href="https://github.com/hydecorp/hydejack">GitHub</a> as always.</p>

<p>The PRO Version is scheduled to release on July 7th on Gumroad. Pre-Orders are open now:</p>

<div class="gumroad-product-embed" data-gumroad-product-id="nuOluY"><a href="https://gumroad.com/l/nuOluY">Loading…</a></div>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>If you are a fan of the old two-column layout, or don’t like modern design tropes such as mega headlines, Hydejack lets you revert these changes on a case-by-case basis via configuration options. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">

      <p>Search was mainly tested for English and German. Please let me know about issues in other languages. 
  While I’ve tried to find a multi-language solution, most showed drastically worse  results for the English base case.
  If you’re technically inclined, you can adopt the code located in <code class="language-plaintext highlighter-rouge">_includes/js/search-worker.js</code> to your needs. <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Ge Lei</name><email>&lt;mail@domain.tld&gt;</email></author><category term="example" /><summary type="html"><![CDATA[Version 9 is the most complete version of Hydejack yet. Modernized design, big headlines, and big new features.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/blog/jeremy-bishop@0,5x.jpg" /><media:content medium="image" url="http://localhost:4000/assets/img/blog/jeremy-bishop@0,5x.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Example Content III</title><link href="http://localhost:4000/example/2018-06-01-example-content-iii/" rel="alternate" type="text/html" title="Example Content III" /><published>2018-06-01T00:00:00+08:00</published><updated>2023-10-06T01:27:20+08:00</updated><id>http://localhost:4000/example/example-content-iii</id><content type="html" xml:base="http://localhost:4000/example/2018-06-01-example-content-iii/"><![CDATA[<p>Hydejack offers a few additional features to markup your markdown.
Don’t worry, these are merely CSS classes added with kramdown’s <code class="language-plaintext highlighter-rouge">{:...}</code> syntax,
so that your content remains compatible with other Jekyll themes.</p>

<h2 id="large-tables">Large Tables</h2>

<table class="scroll-table">
  <thead>
    <tr>
      <th>Default aligned</th>
      <th style="text-align: left">Left aligned</th>
      <th style="text-align: center">Center aligned</th>
      <th style="text-align: right">Right aligned</th>
      <th>Default aligned</th>
      <th style="text-align: left">Left aligned</th>
      <th style="text-align: center">Center aligned</th>
      <th style="text-align: right">Right aligned</th>
      <th>Default aligned</th>
      <th style="text-align: left">Left aligned</th>
      <th style="text-align: center">Center aligned</th>
      <th style="text-align: right">Right aligned</th>
      <th>Default aligned</th>
      <th style="text-align: left">Left aligned</th>
      <th style="text-align: center">Center aligned</th>
      <th style="text-align: right">Right aligned</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>First body part</td>
      <td style="text-align: left">Second cell</td>
      <td style="text-align: center">Third cell</td>
      <td style="text-align: right">fourth cell</td>
      <td>First body part</td>
      <td style="text-align: left">Second cell</td>
      <td style="text-align: center">Third cell</td>
      <td style="text-align: right">fourth cell</td>
      <td>First body part</td>
      <td style="text-align: left">Second cell</td>
      <td style="text-align: center">Third cell</td>
      <td style="text-align: right">fourth cell</td>
      <td>First body part</td>
      <td style="text-align: left">Second cell</td>
      <td style="text-align: center">Third cell</td>
      <td style="text-align: right">fourth cell</td>
    </tr>
    <tr>
      <td>Second line</td>
      <td style="text-align: left">foo</td>
      <td style="text-align: center"><strong>strong</strong></td>
      <td style="text-align: right">baz</td>
      <td>Second line</td>
      <td style="text-align: left">foo</td>
      <td style="text-align: center"><strong>strong</strong></td>
      <td style="text-align: right">baz</td>
      <td>Second line</td>
      <td style="text-align: left">foo</td>
      <td style="text-align: center"><strong>strong</strong></td>
      <td style="text-align: right">baz</td>
      <td>Second line</td>
      <td style="text-align: left">foo</td>
      <td style="text-align: center"><strong>strong</strong></td>
      <td style="text-align: right">baz</td>
    </tr>
    <tr>
      <td>Third line</td>
      <td style="text-align: left">quux</td>
      <td style="text-align: center">baz</td>
      <td style="text-align: right">bar</td>
      <td>Third line</td>
      <td style="text-align: left">quux</td>
      <td style="text-align: center">baz</td>
      <td style="text-align: right">bar</td>
      <td>Third line</td>
      <td style="text-align: left">quux</td>
      <td style="text-align: center">baz</td>
      <td style="text-align: right">bar</td>
      <td>Third line</td>
      <td style="text-align: left">quux</td>
      <td style="text-align: center">baz</td>
      <td style="text-align: right">bar</td>
    </tr>
    <tr>
      <td>Second body</td>
      <td style="text-align: left"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: right"> </td>
      <td>Second body</td>
      <td style="text-align: left"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: right"> </td>
      <td>Second body</td>
      <td style="text-align: left"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: right"> </td>
      <td>Second body</td>
      <td style="text-align: left"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: right"> </td>
    </tr>
    <tr>
      <td>2 line</td>
      <td style="text-align: left"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: right"> </td>
      <td>2 line</td>
      <td style="text-align: left"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: right"> </td>
      <td>2 line</td>
      <td style="text-align: left"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: right"> </td>
      <td>2 line</td>
      <td style="text-align: left"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: right"> </td>
    </tr>
    <tr>
      <td>Footer row</td>
      <td style="text-align: left"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: right"> </td>
      <td>Footer row</td>
      <td style="text-align: left"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: right"> </td>
      <td>Footer row</td>
      <td style="text-align: left"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: right"> </td>
      <td>Footer row</td>
      <td style="text-align: left"> </td>
      <td style="text-align: center"> </td>
      <td style="text-align: right"> </td>
    </tr>
  </tbody>
</table>

<h2 id="code-blocks">Code blocks</h2>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Example can be run directly in your JavaScript console</span>

<span class="c1">// Create a function that takes two arguments and returns the sum of those</span>
<span class="c1">// arguments</span>
<span class="kd">var</span> <span class="nx">adder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Function</span><span class="p">(</span><span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">b</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">return a + b</span><span class="dl">"</span><span class="p">);</span>

<span class="c1">// Call the function</span>
<span class="nf">adder</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
<span class="c1">// &gt; 8</span>
</code></pre></div></div>

<h2 id="math">Math</h2>
<p>Lorem ipsum \(f(x) = x^2\).</p>

\[\begin{aligned}
  \phi(x,y) &amp;= \phi \left(\sum_{i=1}^n x_ie_i, \sum_{j=1}^n y_je_j \right) \\[2em]
            &amp;= \sum_{i=1}^n \sum_{j=1}^n x_i y_j \phi(e_i, e_j)            \\[2em]
            &amp;= (x_1, \ldots, x_n)
               \left(\begin{array}{ccc}
                 \phi(e_1, e_1)  &amp; \cdots &amp; \phi(e_1, e_n) \\
                 \vdots          &amp; \ddots &amp; \vdots         \\
                 \phi(e_n, e_1)  &amp; \cdots &amp; \phi(e_n, e_n)
               \end{array}\right)
               \left(\begin{array}{c}
                 y_1    \\
                 \vdots \\
                 y_n
               \end{array}\right)
\end{aligned}\]

<h2 id="message-boxes">Message boxes</h2>
<p class="message"><strong>NOTE</strong>: You can add a message box.</p>

<h2 id="large-text">Large text</h2>
<p class="lead">You can add large text.</p>

<h2 id="large-images">Large images</h2>
<p><img src="https://via.placeholder.com/800x100" alt="Full-width image" class="lead" width="800" height="100" /></p>

<h2 id="captions-to-images">Captions to images</h2>
<p class="figure"><img src="https://via.placeholder.com/800x100" alt="Full-width image" class="lead" width="800" height="100" />
A caption to an image.</p>

<h2 id="large-quotes">Large quotes</h2>
<blockquote class="lead">
  <p>You can make a quote “pop out”.</p>
</blockquote>

<h2 id="faded-text">Faded text</h2>
<p class="faded">I’m faded, faded, faded.</p>]]></content><author><name>Ge Lei</name><email>&lt;mail@domain.tld&gt;</email></author><category term="example" /><summary type="html"><![CDATA[A page showing Hydejack-specific markdown content.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/blog/example-content-iii.jpg" /><media:content medium="image" url="http://localhost:4000/assets/img/blog/example-content-iii.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Example Content II</title><link href="http://localhost:4000/example/2017-11-23-example-content-ii/" rel="alternate" type="text/html" title="Example Content II" /><published>2017-11-23T00:00:00+08:00</published><updated>2023-10-06T01:27:20+08:00</updated><id>http://localhost:4000/example/example-content-ii</id><content type="html" xml:base="http://localhost:4000/example/2017-11-23-example-content-ii/"><![CDATA[<p>There should be whitespace between paragraphs. We recommend including a README, or a file with information about your project.</p>

<p>There should be whitespace between paragraphs.</p>

<p>Text can be <strong>bold</strong>, <em>italic</em>, or <del>strikethrough</del>.</p>

<p><a href="another-page">Link to another page</a>.</p>

<ul class="large-only" id="markdown-toc">
  <li><a href="#header-2" id="markdown-toc-header-2">Header 2</a>    <ul>
      <li><a href="#header-3" id="markdown-toc-header-3">Header 3</a>        <ul>
          <li><a href="#header-4" id="markdown-toc-header-4">Header 4</a>            <ul>
              <li><a href="#header-5" id="markdown-toc-header-5">Header 5</a>                <ul>
                  <li><a href="#header-6" id="markdown-toc-header-6">Header 6</a></li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
      <li><a href="#theres-a-horizontal-rule-below-this" id="markdown-toc-theres-a-horizontal-rule-below-this">There’s a horizontal rule below this.</a></li>
      <li><a href="#here-is-an-unordered-list" id="markdown-toc-here-is-an-unordered-list">Here is an unordered list:</a></li>
      <li><a href="#and-an-ordered-list" id="markdown-toc-and-an-ordered-list">And an ordered list:</a></li>
      <li><a href="#and-a-nested-list" id="markdown-toc-and-a-nested-list">And a nested list:</a></li>
      <li><a href="#small-image" id="markdown-toc-small-image">Small image</a></li>
      <li><a href="#large-image" id="markdown-toc-large-image">Large image</a></li>
      <li><a href="#definition-lists" id="markdown-toc-definition-lists">Definition lists</a></li>
    </ul>
  </li>
</ul>

<h2 id="header-2">Header 2</h2>

<p>This is a normal paragraph following a header. GitHub is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere.</p>

<h3 id="header-3">Header 3</h3>

<blockquote>
  <p>This is a blockquote following a header.</p>

  <p>When something is important enough, you do it even if the odds are not in your favor.</p>
</blockquote>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Javascript code with syntax highlighting.</span>
<span class="kd">var</span> <span class="nx">fun</span> <span class="o">=</span> <span class="kd">function</span> <span class="nf">lang</span><span class="p">(</span><span class="nx">l</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">dateformat</span><span class="p">.</span><span class="nx">i18n</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./lang/</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">l</span><span class="p">)</span>
  <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Ruby code with syntax highlighting</span>
<span class="no">GitHubPages</span><span class="o">::</span><span class="no">Dependencies</span><span class="p">.</span><span class="nf">gems</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">gem</span><span class="p">,</span> <span class="n">version</span><span class="o">|</span>
  <span class="n">s</span><span class="p">.</span><span class="nf">add_dependency</span><span class="p">(</span><span class="n">gem</span><span class="p">,</span> <span class="s2">"= </span><span class="si">#{</span><span class="n">version</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></div>

<h4 id="header-4">Header 4</h4>

<ul>
  <li>This is an unordered list following a header.</li>
  <li>This is an unordered list following a header.</li>
  <li>This is an unordered list following a header.</li>
</ul>

<h5 id="header-5">Header 5</h5>

<ol>
  <li>This is an ordered list following a header.</li>
  <li>This is an ordered list following a header.</li>
  <li>This is an ordered list following a header.</li>
</ol>

<h6 id="header-6">Header 6</h6>

<table>
  <thead>
    <tr>
      <th style="text-align: left">head1</th>
      <th style="text-align: left">head two</th>
      <th style="text-align: left">three</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">ok</td>
      <td style="text-align: left">good swedish fish</td>
      <td style="text-align: left">nice</td>
    </tr>
    <tr>
      <td style="text-align: left">out of stock</td>
      <td style="text-align: left">good and plenty</td>
      <td style="text-align: left">nice</td>
    </tr>
    <tr>
      <td style="text-align: left">ok</td>
      <td style="text-align: left">good <code class="language-plaintext highlighter-rouge">oreos</code></td>
      <td style="text-align: left">hmm</td>
    </tr>
    <tr>
      <td style="text-align: left">ok</td>
      <td style="text-align: left">good <code class="language-plaintext highlighter-rouge">zoute</code> drop</td>
      <td style="text-align: left">yumm</td>
    </tr>
  </tbody>
</table>

<h3 id="theres-a-horizontal-rule-below-this">There’s a horizontal rule below this.</h3>

<hr />

<h3 id="here-is-an-unordered-list">Here is an unordered list:</h3>

<ul>
  <li>Item foo</li>
  <li>Item bar</li>
  <li>Item baz</li>
  <li>Item zip</li>
</ul>

<h3 id="and-an-ordered-list">And an ordered list:</h3>

<ol>
  <li>Item one</li>
  <li>Item two</li>
  <li>Item three</li>
  <li>Item four</li>
</ol>

<h3 id="and-a-nested-list">And a nested list:</h3>

<ul>
  <li>level 1 item
    <ul>
      <li>level 2 item</li>
      <li>level 2 item
        <ul>
          <li>level 3 item</li>
          <li>level 3 item</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>level 1 item
    <ul>
      <li>level 2 item</li>
      <li>level 2 item</li>
      <li>level 2 item</li>
    </ul>
  </li>
  <li>level 1 item
    <ul>
      <li>level 2 item</li>
      <li>level 2 item</li>
    </ul>
  </li>
  <li>level 1 item</li>
</ul>

<h3 id="small-image">Small image</h3>

<p><img src="https://assets-cdn.github.com/images/icons/emoji/octocat.png" alt="" /></p>

<h3 id="large-image">Large image</h3>

<p><img src="https://guides.github.com/activities/hello-world/branching.png" alt="" /></p>

<h3 id="definition-lists">Definition lists</h3>

<dl>
  <dt>Name</dt>
  <dd>Godzilla</dd>
  <dt>Born</dt>
  <dd>1952</dd>
  <dt>Birthplace</dt>
  <dd>Japan</dd>
  <dt>Color</dt>
  <dd>Green</dd>
</dl>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Or is it?
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The final element.
</code></pre></div></div>]]></content><author><name>Ge Lei</name><email>&lt;mail@domain.tld&gt;</email></author><category term="example" /><summary type="html"><![CDATA[A page showing how regular markdown content is styled in Hydejack.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/blog/example-content-ii.jpg" /><media:content medium="image" url="http://localhost:4000/assets/img/blog/example-content-ii.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Example Content</title><link href="http://localhost:4000/example/2012-02-07-example-content/" rel="alternate" type="text/html" title="Example Content" /><published>2012-02-07T00:00:00+08:00</published><updated>2023-10-06T01:27:20+08:00</updated><id>http://localhost:4000/example/example-content</id><content type="html" xml:base="http://localhost:4000/example/2012-02-07-example-content/"><![CDATA[<p>Cum sociis natoque penatibus et magnis <a href="#">dis parturient montes</a>, nascetur ridiculus mus. <em>Aenean eu leo quam.</em> Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed posuere consectetur est at lobortis. Cras mattis consectetur purus sit amet fermentum.</p>

<blockquote>
  <p>Curabitur blandit tempus porttitor. Nullam quis risus eget urna mollis ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit.</p>
</blockquote>

<p>Etiam porta <strong>sem malesuada magna</strong> mollis euismod. Cras mattis consectetur purus sit amet fermentum. Aenean lacinia bibendum nulla sed consectetur.</p>

<h2 id="inline-html-elements">Inline <abbr title="HyperText Markup Language">HTML</abbr> elements</h2>

<p><abbr title="HyperText Markup Language">HTML</abbr> defines a long list of available inline tags, a complete list of which can be found on the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element">Mozilla Developer Network</a>.</p>

<ul>
  <li><strong>To bold text</strong>, use <code class="language-plaintext highlighter-rouge">**To bold text**</code>.</li>
  <li><em>To italicize text</em>, use <code class="language-plaintext highlighter-rouge">*To italicize text*</code>.</li>
  <li>Abbreviations, like <abbr title="HyperText Markup Language">HTML</abbr> should be defined like this <code class="language-plaintext highlighter-rouge">*[HTML]: HyperText Markup Language</code>.</li>
  <li>Citations, like <cite>— Mark otto</cite>, should use <code class="language-plaintext highlighter-rouge">&lt;cite&gt;</code>.</li>
  <li><del>Deleted</del> text should use <code class="language-plaintext highlighter-rouge">~~deleted~~</code> and <ins>inserted</ins> text should use <code class="language-plaintext highlighter-rouge">&lt;ins&gt;</code>.</li>
  <li>Superscript <sup>text</sup> uses <code class="language-plaintext highlighter-rouge">&lt;sup&gt;</code> and subscript <sub>text</sub> uses <code class="language-plaintext highlighter-rouge">&lt;sub&gt;</code>.</li>
</ul>

<p>Most of these elements are styled by browsers with few modifications on our part.</p>

<h2 id="heading-2">Heading 2</h2>
<p>Vivamus sagittis lacus vel augue rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.</p>

<h3 id="heading-3">Heading 3</h3>
<p>Vivamus sagittis lacus vel augue rutrum faucibus dolor auctor.</p>

<h4 id="heading-4">Heading 4</h4>
<p>Vivamus sagittis lacus vel augue rutrum faucibus dolor auctor.</p>

<h5 id="heading-5">Heading 5</h5>
<p>Vivamus sagittis lacus vel augue rutrum faucibus dolor auctor.</p>

<h6 id="heading-6">Heading 6</h6>
<p>Vivamus sagittis lacus vel augue rutrum faucibus dolor auctor.</p>

<h2 id="code">Code</h2>

<p>Cum sociis natoque penatibus et magnis dis <code class="language-plaintext highlighter-rouge">code element</code> montes, nascetur ridiculus mus.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Example can be run directly in your JavaScript console</span>

<span class="c1">// Create a function that takes two arguments and returns the sum of those</span>
<span class="c1">// arguments</span>
<span class="kd">var</span> <span class="nx">adder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Function</span><span class="p">(</span><span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">b</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">return a + b</span><span class="dl">"</span><span class="p">);</span>

<span class="c1">// Call the function</span>
<span class="nf">adder</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
<span class="c1">// &gt; 8</span>
</code></pre></div></div>

<h2 id="lists">Lists</h2>

<p>Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.</p>

<ul>
  <li>Praesent commodo cursus magna, vel scelerisque nisl consectetur et.</li>
  <li>Donec id elit non mi porta gravida at eget metus.</li>
  <li>Nulla vitae elit libero, a pharetra augue.</li>
</ul>

<p>Donec ullamcorper nulla non metus auctor fringilla. Nulla vitae elit libero, a pharetra augue.</p>

<ol>
  <li>Vestibulum id ligula porta felis euismod semper.</li>
  <li>Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.</li>
  <li>Maecenas sed diam eget risus varius blandit sit amet non magna.</li>
</ol>

<p>Cras mattis consectetur purus sit amet fermentum. Sed posuere consectetur est at lobortis.</p>

<dl>
  <dt>HyperText Markup Language (<abbr title="HyperText Markup Language">HTML</abbr>)</dt>
  <dd>The language used to describe and define the content of a Web page</dd>
  <dt>Cascading Style Sheets (<abbr title="Cascading Style Sheets">CSS</abbr>)</dt>
  <dd>Used to describe the appearance of Web content</dd>
  <dt>JavaScript (<abbr title="JavaScript">JS</abbr>)</dt>
  <dd>The programming language used to build advanced Web sites and applications</dd>
</dl>

<p>Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Nullam quis risus eget urna mollis ornare vel eu leo.</p>

<h2 id="images">Images</h2>

<p>Quisque consequat sapien eget quam rhoncus, sit amet laoreet diam tempus. Aliquam aliquam metus erat, a pulvinar turpis suscipit at.</p>

<p><img src="https://via.placeholder.com/800x400" alt="800x400" title="Large example image" /></p>

<p><img src="https://via.placeholder.com/400x200" alt="400x200" title="Medium example image" /></p>

<p><img src="https://via.placeholder.com/200x200" alt="200x200" title="Small example image" /></p>

<h2 id="tables">Tables</h2>

<p>Aenean lacinia bibendum nulla sed consectetur. Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Name</th>
      <th style="text-align: left">Upvotes</th>
      <th style="text-align: left">Downvotes</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Alice</td>
      <td style="text-align: left">10</td>
      <td style="text-align: left">11</td>
    </tr>
    <tr>
      <td style="text-align: left">Bob</td>
      <td style="text-align: left">4</td>
      <td style="text-align: left">3</td>
    </tr>
    <tr>
      <td style="text-align: left">Charlie</td>
      <td style="text-align: left">7</td>
      <td style="text-align: left">9</td>
    </tr>
  </tbody>
  <tfoot>
    <tr>
      <td style="text-align: left">Totals</td>
      <td style="text-align: left">21</td>
      <td style="text-align: left">23</td>
    </tr>
  </tfoot>
</table>

<p>Nullam id dolor id nibh ultricies vehicula ut id elit. Sed posuere consectetur est at lobortis. Nullam quis risus eget urna mollis ornare vel eu leo.</p>]]></content><author><name>Ge Lei</name><email>&lt;mail@domain.tld&gt;</email></author><category term="example" /><summary type="html"><![CDATA[Howdy! This is an example blog post that shows several types of HTML content supported in this theme.]]></summary></entry></feed>